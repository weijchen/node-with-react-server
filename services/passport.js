const passport = require("passport")
const GoogleStrategy = require("passport-google-oauth20").Strategy
// const FacebookStrategy = require("passport-facebook").Strategy
const mongoose = require("mongoose")
const keys = require("../config/keys")

const User = mongoose.model('users');

// user here is the user we put into the database
passport.serializeUser((user, done) => {
  done(null, user.id);  // user.id is the id generated by mongo (internal id)
});

passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

// setting up the google oauth
passport.use(
  new GoogleStrategy( // by default, set as 'google' identifier
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleID: profile.id });
      if (existingUser) {
        return done(null, existingUser);
      }
      const user = await new User({ googleID: profile.id }).save();
      done(null, user);
    }
  ),

  // // TODO: add facebook authentication
  // new FacebookStrategy({
  //   clientID: keys.facebookAppID,
  //   clientSecret: keys.facebookAppSecret,
  //   callbackURL: 'https://www.example.com/oauth2/redirect/facebook'
  // },
  //   async (accessToken, refreshToken, profile, done) => {
  //     const existingUser = await User.findOne({ facebookId: profile.id });
  //     if (existingUser) {
  //       return done(null, existingUser);
  //     }
  //     const user = await new User({ googleID: profile.id }).save();
  //     done(null, user);
  //   }
  // )
);
